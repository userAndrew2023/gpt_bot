import enum
import openai
import telebot
from mysql.connector import connect
from telebot import types
from config import *

token = TOKEN
bot = telebot.TeleBot(TOKEN)
engine = "text-davinci-003"

users = {}
words = {}
openai.api_key = GPT_API_KEY


class Actions(enum.Enum):
    ACTION_GENERATE = 0
    ACTION_REWRITE = 1


@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    items = [
        types.KeyboardButton("üòé –ê–∫–∫–∞—É–Ω—Ç"),
        types.KeyboardButton("üîÆ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞"),
        types.KeyboardButton("‚Ñπ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"),
        types.KeyboardButton("‚úè –†–µ—Ä–∞–π—Ç —Ç–µ–∫—Å—Ç–∞"),
        types.KeyboardButton("üì± –ö–æ–Ω—Ç–∞–∫—Ç—ã"),
        types.KeyboardButton("üîë –ü–æ–¥–ø–∏—Å–∫–∞")
    ]

    markup.add(*items, row_width=2)
    bot.send_message(chat_id=message.chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=markup)

    users[message.chat.id] = None


@bot.message_handler()
def message_handler(message):
    if message.text == "üîÆ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞":
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª")
        users[message.chat.id] = Actions.ACTION_GENERATE
    elif message.text == "‚úè –†–µ—Ä–∞–π—Ç —Ç–µ–∫—Å—Ç–∞":
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç", reply_markup=None)
        users[message.chat.id] = Actions.ACTION_REWRITE
    elif message.text == "üòé –ê–∫–∫–∞—É–Ω—Ç":
        bot.send_message(message.chat.id, "ID: " + str(message.chat.id))
        users[message.chat.id] = Actions.ACTION_REWRITE
    elif message.text == "‚Ñπ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è":
        bot.send_message(message.chat.id, "")
        users[message.chat.id] = Actions.ACTION_REWRITE
    elif message.text == "üì± –ö–æ–Ω—Ç–∞–∫—Ç—ã":
        bot.send_message(message.chat.id, "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ Dobby.GPT:\n+7 800 777-08-35\ninfo@dobby.plus")
        users[message.chat.id] = Actions.ACTION_REWRITE
    elif message.text == "üîë –ü–æ–¥–ø–∏—Å–∫–∞":
        bot.send_message(message.chat.id, "–ú–∞–π: –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
        users[message.chat.id] = Actions.ACTION_REWRITE
    else:
        if users.get(message.chat.id, False) is False:
            bot.send_message(chat_id=message.chat.id, text="–û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
            users[message.chat.id] = None
        elif users[message.chat.id] == Actions.ACTION_GENERATE:
            if len(message.text.split()) > 100:
                bot.send_message(chat_id=message.chat.id, text="–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Å–ª–æ–≤ –≤ –∑–∞–ø—Ä–æ—Å–µ")
            else:
                messages = [{"role": "user", "content": f"–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Ç–µ–∫—Å—Ç –∏–∑ —Å–ª–æ–≤: {message.text}"}]
                response = openai.ChatCompletion.create(
                    model="gpt-3.5-turbo",
                    max_tokens=1000,
                    temperature=1.2,
                    messages=messages
                )
                bot.send_message(chat_id=message.chat.id, text=response["choices"][0]['message']['content'])

                with connect(
                        host=HOST,
                        user=USER,
                        password=PASSWORD
                ) as connection_task:
                    with connection_task.cursor() as cursor_task:
                        cursor_task.execute(f'INSERT INTO `gpt_db`.`tasks` (task_text, task_type, user_id)'
                                            f'VALUES ("{message.text}", '
                                            f'"{Actions.ACTION_GENERATE}", '
                                            f'"{message.chat.id}")')
                        connection_task.commit()
        elif users[message.chat.id] == Actions.ACTION_REWRITE:
            if len(message.text.split()) > 500:
                bot.send_message(chat_id=message.chat.id, text="–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Å–ª–æ–≤ –≤ –∑–∞–ø—Ä–æ—Å–µ")
            else:
                messages = [{"role": "user", "content": f"–ü–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –∏–∑ —Å–ª–æ–≤ –∏ –∑–∞–º–µ–Ω–∏—Ç—å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏: "
                                                        f"{message.text}"}]
                response = openai.ChatCompletion.create(
                    model="gpt-3.5-turbo",
                    max_tokens=1000,
                    temperature=1.2,
                    messages=messages
                )
                bot.send_message(chat_id=message.chat.id, text=response["choices"][0]['message']['content'])

                with connect(
                        host=HOST,
                        user=USER,
                        password=PASSWORD
                ) as connection_task:
                    with connection_task.cursor() as cursor_task:
                        cursor_task.execute(f'INSERT INTO `gpt_db`.`tasks` (task_text, task_type, user_id)'
                                            f'VALUES ("{message.text}", '
                                            f'"{Actions.ACTION_REWRITE}", '
                                            f'"{message.chat.id}")')
                        connection_task.commit()
        else:
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å")


if __name__ == "__main__":
    with connect(
            host=HOST,
            user=USER,
            password=PASSWORD
    ) as connection:
        create_db_query = "CREATE DATABASE IF NOT EXISTS gpt_db"
        with connection.cursor() as cursor:
            create_table = """CREATE TABLE IF NOT EXISTS `gpt_db`.`tasks` (
      `id` INT NOT NULL AUTO_INCREMENT,
      `task_text` TEXT NOT NULL,
      `task_type` TEXT NOT NULL,
      `user_id` TEXT NOT NULL,
      PRIMARY KEY (`id`));"""
            cursor.execute(create_db_query)
            cursor.execute(create_table)
            connection.commit()

    bot.infinity_polling()
